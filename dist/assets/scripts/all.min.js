(function() {
  var app,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = angular.module('battlecruisers', []);

  app.controller('GameController', [
    '$http', function($http) {
      var game;
      game = this;
      game.cards = {};
      $http.get('/static/data/cards.json').success(function(data) {
        return game.cards = data;
      });
      game.card_actions = {
        "3": {
          "main": function(player_id) {
            console.debug("Player " + player_id + " is safe from main effects for this turn and next");
            return game.addSafeTurnsToPlayer(player_id, 2);
          },
          "conflict": function(player_id) {
            console.debug("Player " + player_id + " in conflict but nothing happens");
            return null;
          }
        },
        "11": {
          "main": function(player_id) {
            console.debug("Player " + player_id + " earns 4 tokens and discards a card");
            game.addTokensToPlayerPile(player_id, 4);
            return game.moveCardToPile(player_id, "hand", "discard_pile");
          },
          "conflict": function(player_id) {
            console.debug("Player " + player_id + " is in conflict and discards a card");
            return game.moveCardToPile(player_id, "hand", "discard_pile");
          }
        },
        "13": {
          "main": function(player_id) {
            console.debug("Player " + player_id + " earns 3 tokens");
            return game.addTokensToPlayerPile(player_id, 3);
          },
          "conflict": function(player_id) {
            console.debug("Player " + player_id + " is in conflict, so gains 3 tokens but loses 1 for each conflict");
            game.addTokensToPlayerPile(player_id, 3);
            return game.addTokensToPlayerPile(player_id, -game.cardsInPlay["cardNumberCounts"]["13"]);
          }
        },
        "22": {
          "main": function(player_id) {
            var ref, results, victim, victim_id;
            console.debug("Player " + player_id + " takes a token from all players, if they are not in the lead");
            console.debug(game.whoHasMostTokens());
            console.debug(indexOf.call(game.whoHasMostTokens(), player_id) < 0);
            if (indexOf.call(game.whoHasMostTokens(), player_id) < 0) {
              ref = game.players;
              results = [];
              for (victim_id in ref) {
                victim = ref[victim_id];
                console.debug("Conditions were almost met! " + player_id + " " + victim_id);
                if (victim_id !== player_id && victim["safe_turns"] <= 0) {
                  console.debug("Conditions were met! " + player_id + " " + victim_id);
                  if (victim["tokens"] > 0) {
                    game.addTokensToPlayerPile(victim_id, -1);
                    results.push(game.addTokensToPlayerPile(player_id, 1));
                  } else {
                    results.push(void 0);
                  }
                } else {
                  results.push(void 0);
                }
              }
              return results;
            }
          },
          "conflict": function(player_id) {
            console.debug("Player " + player_id + " is in conflict but nothing happens");
            return null;
          }
        },
        "31": {
          "main": function(player_id) {
            var ref, results, victim, victim_id;
            console.debug("Player " + player_id + " commands every opponent to discard a card");
            ref = game.players;
            results = [];
            for (victim_id in ref) {
              victim = ref[victim_id];
              if (victim_id === !player_id && victim["safe_turns"] <= 0) {
                results.push(game.moveCardToPile(victim_id, "hand", "discard_pile"));
              } else {
                results.push(void 0);
              }
            }
            return results;
          },
          "conflict": function(player_id) {
            console.debug("Player " + player_id + " is in conflict and discards a card");
            return game.moveCardToPile(player_id, "hand", "discard_pile");
          }
        },
        "43": {
          "main": function(player_id) {
            game.addTokensToPlayerPile(player_id, 1);
            console.debug("Player " + player_id + " takes 3 cards from their discard pile if they only have one card remaining");
            if (game.players[player_id]["hand"].length === 1) {
              return game.moveCardToPile(player_id, "discard_pile", "hand");
            }
          },
          "conflict": function(player_id) {
            var i, index, ref, results;
            console.debug("Player " + player_id + " is in conflict and must discard this card (#43)");
            results = [];
            for (index = i = ref = game.players[player_id]["hand"].length - 1; ref <= 0 ? i < 0 : i > 0; index = ref <= 0 ? ++i : --i) {
              console.warn(index);
              console.warn(game.players[player_id]["hand"]);
              if (game.players[player_id]["in_play"][index]["id"] === "43") {
                game.moveCardToPile(player_id, "in_play", "discard_pile", index);
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        }
      };
      game.getHand = function(card_numbers) {
        var card_number, hand;
        hand = [
          (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = card_numbers.length; i < len; i++) {
              card_number = card_numbers[i];
              results.push(game.cards[card_number]);
            }
            return results;
          })()
        ];
        return hand[0];
      };
      game.token_pool = 34;
      game.players = {};
      game.whoHasMostTokens = function() {
        var highest_tokens, id, player, player_ids, ref;
        highest_tokens = 0;
        player_ids = [];
        console.log(game.players);
        ref = game.players;
        for (id in ref) {
          player = ref[id];
          if (player["tokens"] > highest_tokens) {
            highest_tokens = player["tokens"];
            player_ids = [id];
          } else if (player["tokens"] === highest_tokens) {
            player_ids.push(id);
          }
        }
        return player_ids;
      };
      game.addSafeTurnsToPlayer = function(player_id, num) {
        if (game.players[player_id]["safe_turns"] + num > 0) {
          game.players[player_id]["safe_turns"] += num;
        } else {
          game.players[player_id]["safe_turns"] = 0;
        }
        return {
          player_id: game.players[player_id]
        };
      };
      game.addTokensToPlayerPile = function(player_id, num) {
        if (game.players[player_id]["tokens"] + num > 0) {
          if (game.token_pool + num > 0) {
            game.players[player_id]["tokens"] += num;
            game.token_pool -= num;
          } else {
            game.players[player_id]["tokens"] += game.token_pool;
            game.token_pool = 0;
          }
        } else {
          game.token_pool -= game.players[player_id]["tokens"];
          game.players[player_id]["tokens"] = 0;
        }
        return {
          player_id: game.players[player_id]
        };
      };
      game.randomCardFromHand = function(hand) {
        return Math.floor(Math.random() * hand.length);
      };
      game.moveCardToPile = function(player_id, from_pile, to_pile, card) {
        if (card == null) {
          card = game.randomCardFromHand(game.players[player_id][from_pile]);
        }
        console.debug("Player " + player_id + " moves Card #" + card + " from " + from_pile + " to " + to_pile);
        game.players[player_id][to_pile].push(game.players[player_id][from_pile][card]);
        return game.players[player_id][from_pile].splice(card, 1)[0];
      };
      game.handChoice = [3, 11, 13, 22, 31, 43];
      game.newGame = function(number_of_players) {
        var i, id, ref;
        game.turn_number = 0;
        game.over = false;
        game.players = {};
        for (id = i = 1, ref = number_of_players; 1 <= ref ? i <= ref : i >= ref; id = 1 <= ref ? ++i : --i) {
          game.players[id] = {
            "id": id,
            "status": "NORMAL",
            "type": "ai",
            "view": "remote",
            "tokens": 0,
            "safe_turns": 0,
            "hand": game.getHand(game.handChoice),
            "in_play": [],
            "recovery_zone": [],
            "discard_pile": []
          };
          game.players[id];
          game.addTokensToPlayerPile(id, 1);
          game.moveCardToPile(id, "hand", "recovery_zone");
          game.moveCardToPile(id, "hand", "discard_pile");
        }
        game.buttons["new_game"]["active"] = false;
        game.buttons["start_game"]["active"] = true;
        return console.log(game.players);
      };
      game.reset = function() {
        var button, id, ref, ref1, results;
        game.turn_number = 0;
        game.players = {};
        game.cardsInPlay = {};
        ref = game.buttons;
        results = [];
        for (id in ref) {
          button = ref[id];
          console.log(button);
          if ((ref1 = button["id"]) === 'new_game') {
            results.push(button["active"] = true);
          } else {
            results.push(button["active"] = false);
          }
        }
        return results;
      };
      game.cards_in_play = [];
      game.runGame = function() {
        game.buttons["start_game"]["active"] = false;
        game.turn();
        return game.buttons["next_turn"]["active"] = true;
      };
      game.turn = function() {
        var card, cardPlayed, card_number, count, i, id, index, len, player, player_id, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, total_cards;
        if (game.over) {
          return game.buttons["next_turn"]["disabled"] = true;
        } else {
          game.buttons["next_turn"]["disabled"] = true;
          game.turn_number += 1;
          game.cardsInPlay = {
            "show": false,
            "cardsPlayed": {},
            "cardNumberCounts": new function() {
              var f, i, len, ref;
              ref = game.handChoice;
              for (i = 0, len = ref.length; i < len; i++) {
                f = ref[i];
                this[f] = 0;
              }
              return this;
            }
          };
          ref = game.players;
          for (id in ref) {
            player = ref[id];
            if (player["type"] === "ai") {
              cardPlayed = game.moveCardToPile(id, "hand", "in_play");
              game.cardsInPlay["cardsPlayed"][id] = cardPlayed;
              game.cardsInPlay["cardNumberCounts"][cardPlayed["id"]] += 1;
            } else {
              console.log("Removing Player " + player + " fromm game for being human");
              game.players.splice(id, 1);
            }
          }
          console.log(game.cardsInPlay);
          game.cardsInPlay["show"] = true;
          console.log(game.cardsInPlay["cardNumberCounts"]);
          ref1 = game.cardsInPlay["cardNumberCounts"];
          for (card_number in ref1) {
            count = ref1[card_number];
            if (count === 1) {
              ref2 = game.cardsInPlay["cardsPlayed"];
              for (player_id in ref2) {
                card = ref2[player_id];
                console.debug("Player " + player_id + " played card #" + card_number);
                if (card_number === card["id"]) {
                  game.card_actions[card_number]["main"](player_id);
                }
              }
            } else if (count > 1) {
              ref3 = game.cardsInPlay["cardsPlayed"];
              for (player_id in ref3) {
                card = ref3[player_id];
                if (card_number === card["id"]) {
                  game.card_actions[card_number]["conflict"](player_id);
                }
              }
            }
          }
          ref4 = game.players;
          for (id in ref4) {
            player = ref4[id];
            total_cards = player["hand"].length + player["recovery_zone"].length;
            if (total_cards === 1) {
              player["status"] = "RED ALERT";
            } else if (total_cards === 0) {
              player["status"] = "ELIMINATED";
            } else {
              player["status"] = "NORMAL";
            }
          }
          ref5 = game.players;
          for (id in ref5) {
            player = ref5[id];
            ref6 = player["recovery_zone"];
            for (index in ref6) {
              card = ref6[index];
              game.moveCardToPile(id, "recovery_zone", "hand", 0);
            }
            ref7 = player["in_play"];
            for (index in ref7) {
              card = ref7[index];
              game.moveCardToPile(id, "in_play", "recovery_zone", 0);
            }
          }
          ref8 = game.players;
          for (id in ref8) {
            player = ref8[id];
            if (player["tokens"] >= 15) {
              player["winner"] = true;
              game.over = true;
            }
            if (game.players.length === 1) {
              player["winner"] = true;
              game.over = true;
            }
          }
          console.log(game.players);
          if (!game.over) {
            game.buttons["next_turn"]["disabled"] = false;
            ref9 = game.players;
            results = [];
            for (i = 0, len = ref9.length; i < len; i++) {
              player = ref9[i];
              results.push(game.addSafeTurnsToPlayer(player_id, -1));
            }
            return results;
          } else {
            return game.buttons["reset_game"]["active"] = true;
          }
        }
      };
      game.buttons = {};
      $http.get('/static/data/buttons.json').success(function(data) {
        return game.buttons = data;
      });
      game.button_actions = {
        "new_game": game.newGame,
        "start_game": game.runGame,
        "next_turn": game.turn,
        "reset_game": game.reset
      };
      return game;
    }
  ]);

  app.filter('nonEmpty', function() {
    return function(object) {
      return !!(object && Object.keys(object).length > 0);
    };
  });

  return app;

}).call(this);
